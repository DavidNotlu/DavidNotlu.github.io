import matplotlib.pyplot as plt
import numpy as np
import math

# Function to calculate problem size for T(n) = 15n^2
def problem_size_15n2(n):
    return (24*10e9*60*60)/(15*n^2)

# Function to calculate problem size for T(n) = 8n^3
def problem_size_8n3(n):
    return (24*10e9*60*60)/(8*n^3)

# Function to calculate problem size for T(n) = 2n
def problem_size_2n(n):
    return (24*10e9*60*60)/(2^n)

# Function to calculate problem size for T(n) = 3n
def problem_size_3n(n):
    return (24*10e9*60*60)/(3^n)

# Function to calculate problem size for T(n) = n log n
def problem_size_facn(n):
    return (24*10e9*60*60)/(math.factorial(n))

# Function to calculate problem size for T(n) = n log n
def problem_size_nlogn(n):
    return (24*10e9*60*60)/(n*math.log(n))

# Range of n values
n_values = np.arange(2, 21)

# Plotting T(n) vs n for each complexity
plt.figure(figsize=(10, 6))

plt.plot(n_values, [problem_size_15n2(n) for n in n_values], label='15n^2')
plt.plot(n_values, [problem_size_8n3(n) for n in n_values], label='8n^3')
plt.plot(n_values, [problem_size_2n(n) for n in n_values], label='2n')
plt.plot(n_values, [problem_size_3n(n) for n in n_values], label='3n')
plt.plot(n_values, [problem_size_facn(n) for n in n_values], label='n!')
plt.plot(n_values, [problem_size_nlogn(n) for n in n_values], label='n log n')

plt.xlabel('n')
plt.ylabel('Problem Size')
plt.legend()
plt.title('T(n) vs n')
plt.show()
